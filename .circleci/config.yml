version: 2.1
orbs:
  python: circleci/python@2

jobs:
  test-python:
    docker:
      - image: cimg/python:3.13-node  # Main Python/Node.js image
      - image: circleci/mysql:8.0      # MySQL service image
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      # Wait for MySQL to be ready
      - run:
          name: Wait for MySQL service
          command: |
            for i in `seq 1 10`; do
              nc -z localhost 3306 && echo Success && break
              echo "Waiting for MySQL..."
              sleep 3
            done
      # Debug: Print environment variables to ensure they are correctly set
      - run:
          name: Debug Environment Variables
          command: |
            echo "MYSQL_USER: ${MYSQL_USER}"
            echo "MYSQL_PASSWORD: ${MYSQL_PASSWORD}"
            echo "MYSQL_DATABASE: ${MYSQL_DATABASE}"
      # Install MySQL client in the main container
      - run:
          name: Install MySQL client
          command: sudo apt-get update && sudo apt-get install -y mysql-client
      # Test MySQL connection status
      - run:
          name: Test MySQL Connection
          command: |
            echo "Testing MySQL root connection"
            mysql -u root -h 127.0.0.1 -e "SELECT 1;"
      # Set the MYSQL_PWD environment variable to securely pass the password
      - run:
          name: Create MySQL User and Database
          command: |
            mysql -u root -h 127.0.0.1 -e "CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE};"
            mysql -u root -h 127.0.0.1 -e "CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';"
            mysql -u root -h 127.0.0.1 -e "GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}.* TO '${MYSQL_USER}'@'%';"
            mysql -u root -h 127.0.0.1 -e "FLUSH PRIVILEGES;"
      
      # Run the MySQL initialization script (init.sql)
      - run:
          name: Initialize MySQL Database with init.sql
          command: |
            export MYSQL_PWD=${MYSQL_PASSWORD}
            mysql -u ${MYSQL_USER} -h 127.0.0.1 ${MYSQL_DATABASE} < ../database/init.sql
      # Install Python dependencies
      - python/install-packages
      # Run your tests
      - run:
          name: Run tests
          command: pytest --junitxml=junit.xml
      - store_test_results:
          path: junit.xml

workflows:
  build-and-test:
    jobs:
      - test-python
